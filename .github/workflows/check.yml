---
name: Check

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '**'

jobs:
  test:
    name: Test (Node.js v${{ matrix.node }} on ${{ matrix.os_name }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        node:
          - '16'
          - '18'
        include:
          - os: ubuntu-latest
            os_name: Linux
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        uses: ./.github/actions/setup
        with:
          node_version: ${{ matrix.node }}
      - name: Test
        run: npm test
  lint:
    name: Lint (Node.js v${{ matrix.node }})
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        node:
          - '16'
          - '18'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        uses: ./.github/actions/setup
        with:
          node_version: ${{ matrix.node }}
      - name: Lint
        run: npm run lint
  build:
    name: Build
    uses: ./.github/workflows/_build.yml
  install:
    name: Install (Node.js v${{ matrix.node }} on ${{ matrix.os_name }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        node:
          - '16'
          - '18'
        include:
          - os: ubuntu-latest
            os_name: Linux
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.artifact_name }}
          path: .
      - name: Find packages
        uses: tj-actions/glob@v16
        id: packages
        with:
          files: '*.tgz'
      - name: Create package.json
        uses: DamianReeves/write-file-action@v1.2
        with:
          write-mode: overwrite
          path: package.json
          contents: |
            {"type":"module"}
      - name: Create index.js
        uses: DamianReeves/write-file-action@v1.2
        with:
          write-mode: overwrite
          path: index.js
          contents: |
            import '@seamapi/react'
      - name: Install
        run: npm install --save ${{ steps.packages.outputs.paths }}
      - name: Run
        run: node index.js
  typecheck:
    name: Typecheck (Node.js v${{ matrix.node }})
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        node:
          - '16'
          - '18'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        uses: ./.github/actions/setup
        with:
          node_version: ${{ matrix.node }}
      - name: Check types
        run: npm run typecheck
  docs:
    name: Docs
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        uses: ./.github/actions/setup
      - name: Build docs
        run: npm run docs:build
  assets:
    name: Assets
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.artifact_name }}
          path: .
      - name: Extract package
        run: tar -xzf *.tgz
      - name: Sync R2
        uses: jakejarvis/s3-sync-action@v0.5.1
        env:
          AWS_S3_BUCKET: ${{ vars.CLOUDFLARE_R2_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ vars.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.CLOUDFLARE_R2_BUCKET_REGION }}
          AWS_S3_ENDPOINT: https://${{ vars.CLOUDFLARE_ACCOUNT_ID }}.r2.cloudflarestorage.com
          SOURCE_DIR: package
          DEST_DIR: tmp/${{ github.sha }}
